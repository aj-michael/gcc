package edu.rosehulman.minijavac.generated;

import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableList;

import edu.rosehulman.minijavac.ast.*;
import edu.rosehulman.minijavac.ast.BinaryOperation.BinaryOperator;
import edu.rosehulman.minijavac.ast.UnaryOperation.UnaryOperator;

import java_cup.runtime.*;

import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

parser code {:
  Lexer lexer;
  LinkedList<String> output = new LinkedList<>();
  static final String RECOVERY = "Error recovery to next semicolon.";

  public Parser(Lexer lexer) {
    this.lexer = lexer;
  }

  public String getParseLog() {
    return Joiner.on("\n").join(output) + "\n";
  }

  public void syntax_error(Symbol current) {
    output.add("\n\nERROR in line " + current.left + " and column " + current.right + ": Syntax error\n");
    output.add(RECOVERY);
  }

  @Override
  public void unrecovered_syntax_error(Symbol current) {
    if (output.peekLast().equals(RECOVERY)) {
        output.pollLast();
    }
    output.add("\n\nERROR in line " + current.left + " and column " + current.right + ": Couldn't repair and continue parse\n\nException processing file: Can't recover from previous error(s)");
  }

  public Program parseProgram() throws Exception {
    Symbol symbol = super.parse();
    if (symbol == null || !(symbol.value instanceof Program)) {
        return null;
    } else {
        return (Program) symbol.value;
    }
  }
:};

scan with {:
    Symbol symbol = lexer.next_token();
    if (symbol.sym == Symbols.UnmatchedCharacter) {
        output.add(String.format("Unmatched character '%s' at line %d and column %d", symbol.value, symbol.left, symbol.right));
        return scan();
    } else {
        return symbol;
    }
:};

terminal And;
terminal Assignment;
terminal Boolean;
terminal Class;
terminal Comma;
terminal Divide;
terminal Dot;
terminal Else;
terminal Equals;
terminal Extends;
terminal False;
terminal GreaterThan;
terminal GreaterThanOrEqual;
terminal If;
terminal Int;
terminal Lexer.DisplayableValue<Integer> Integer;
terminal LeftBrace;
terminal LeftBracket;
terminal LeftParenthesis;
terminal LessThan;
terminal LessThanOrEqual;
terminal Main;
terminal Minus;
terminal Multiply;
terminal New;
terminal Not;
terminal NotEquals;
terminal Null;
terminal Or;
terminal Plus;
terminal Public;
terminal Return;
terminal RightBrace;
terminal RightBracket;
terminal RightParenthesis;
terminal Semicolon;
terminal Static;
terminal Lexer.DisplayableValue<String> ID;
terminal String;
terminal SystemOutPrintln;
terminal This;
terminal True;
terminal Void;
terminal While;

terminal String UnmatchedCharacter;

non terminal CallExpression CallExpr;
non terminal ClassDeclaration ClassDecl;
non terminal List<ClassDeclaration> ClassDeclList;
non terminal VariableDeclaration ClassVarDecl;
non terminal List<VariableDeclaration> ClassVarDeclList;
non terminal List<VariableDeclaration> FormalList;
non terminal Expression Expr;
non terminal List<Expression> ExprList;
non terminal VariableDeclaration Formal;
non terminal LiteralExpression LiteralExpr;
non terminal ClassDeclaration MainClassDecl;
non terminal MethodDeclaration MethodDecl;
non terminal List<MethodDeclaration> MethodDeclList;
non terminal List<Expression> OptExprList;
non terminal Optional<String> OptExtends;
non terminal List<VariableDeclaration> OptFormalList;
non terminal ParenthesisExpression ParenExpr;
non terminal Program Program;
non terminal Statement Stmt;
non terminal List<Statement> StmtList;
non terminal String Type;
non terminal UnaryOperation UnaryExpr;

precedence left Or;
precedence left And;
precedence left Equals, NotEquals;
precedence left GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual;
precedence left Plus, Minus;
precedence left Multiply, Divide;
precedence left Not;

start with Program;

Program ::= MainClassDecl:mcl ClassDeclList:cdl
    {:
        output.add("Program ::= MainClassDecl ClassDeclList");
        RESULT = new Program(mcl, cdl);
    :}
    ;
ClassDeclList ::= ClassDeclList:cdl ClassDecl:cd
    {:
        output.add("ClassDeclList ::= ClassDeclList ClassDecl");
        cdl.add(cd);
        RESULT = cdl;
    :}
    |
    {:
        output.add("ClassDeclList ::= ");
        RESULT = new LinkedList<>();
    :}
    ;
MainClassDecl ::= Class ID:name LeftBrace Public Static Void Main LeftParenthesis String LeftBracket RightBracket ID RightParenthesis LeftBrace StmtList:sl RightBrace RightBrace
    {:
        output.add("MainClassDecl ::= ...");
        MethodDeclaration main = new MainMethodDeclaration(sl);
        RESULT = new ClassDeclaration(name.value, Optional.empty(), ImmutableList.of(), ImmutableList.of(main));
    :}
    ;
StmtList ::= StmtList:sl Stmt:s
    {:
        output.add("StmtList ::= StmtList Stmt");
        sl.add(s);
        RESULT = sl;
    :}
    |
    {:
        output.add("StmtList ::= ");
        RESULT = new LinkedList<>();
    :}
    ;
ClassDecl ::= Class ID:name OptExtends:parent LeftBrace ClassVarDeclList:cvdl MethodDeclList:mdl RightBrace
    {:
        output.add("ClassDecl ::= ...");
        RESULT = new ClassDeclaration(name.value, parent, cvdl, mdl);
    :}
    ;
OptExtends ::= Extends ID:name
    {:
        output.add("OptExtends ::= EXTENDS ID");
        RESULT = Optional.of(name.value);
    :}
    |
    {:
        output.add("OptExtends ::= ");
        RESULT = Optional.empty();
    :}
    ;
ClassVarDeclList ::= ClassVarDeclList:cvdl ClassVarDecl:cvd
    {:
        output.add("ClassVarDeclList ::= ClassVarDeclList ClassVarDecl");
        cvdl.add(cvd);
        RESULT = cvdl;
    :}
    |
    {:
        output.add("ClassVarDeclList ::= ");
        RESULT = new LinkedList<>();
    :}
    ;
ClassVarDecl ::= Type:type ID:name Semicolon
    {:
        output.add("ClassVarDecl ::= Type ID SEMI");
        RESULT = new VariableDeclaration(name.value, type);
    :}
    ;
MethodDeclList ::= MethodDeclList:mdl MethodDecl:md
    {:
        output.add("MethodDeclList ::= MethodDeclList MethodDecl");
        mdl.add(md);
        RESULT = mdl;
    :}
    |
    {:
        output.add("MethodDeclList ::= ");
        RESULT = new LinkedList<>();
    :}
    ;
MethodDecl ::= Public Type:returnType ID:name LeftParenthesis OptFormalList:ofl RightParenthesis LeftBrace StmtList:sl Return Expr:e Semicolon RightBrace
    {:
        output.add("MethodDecl ::= ... ");
        RESULT = new MethodDeclaration(name.value, ofl, sl, returnType, e);
    :}
    | Public Void ID:name LeftParenthesis OptFormalList:ofl RightParenthesis LeftBrace StmtList:sl RightBrace
    {:
        output.add("MethodDecl ::= ... ");
        RESULT = new MethodDeclaration(name.value, ofl, sl, "null", null);
    :}
    ;
OptFormalList ::= FormalList:fl
    {:
        output.add("OptFormalList ::= FormalList");
        RESULT = fl;
    :}
    |
    {:
        output.add("OptFormalList ::= ");
        RESULT = new LinkedList<>();
    :}
    ;
FormalList ::= FormalList:fl Comma Formal:f
    {:
        output.add("FormalList ::= FormalList COMMA Formal");
        fl.add(f);
        RESULT = fl;
    :}
    | Formal:f
    {:
        output.add("FormalList ::= Formal");
        List<VariableDeclaration> fl = new LinkedList<>();
        fl.add(f);
        RESULT = fl;
    :}
    ;
Formal ::= Type:type ID:name
    {:
        output.add("Formal ::= Type ID");
        RESULT = new VariableDeclaration(name.value, type);
    :}
    ;
Type ::= Int
    {:
        output.add("Type ::= INT");
        RESULT = "int";
    :}
    | Boolean
    {:
        output.add("Type ::= BOOLEAN");
        RESULT = "boolean";
    :}
    | ID:name
    {:
        output.add("Type ::= ID");
        RESULT = name.value;
    :}
    ;
Stmt ::= Type:type ID:id Assignment Expr:expression Semicolon
    {:
        output.add("Stmt ::= Type ID GETS Expr SEMI");
        RESULT = new AssignmentStatement(type, id.value, expression);
    :}
    | LeftBrace StmtList:sl RightBrace
    {:
        output.add("Stmt ::= LBRACE StmtList RBRACE");
        RESULT = new BlockStatement(sl);
    :}
    | If LeftParenthesis Expr:condition RightParenthesis Stmt:trueStatement Else Stmt:falseStatement
    {:
        output.add("Stmt ::= IF LPAREN Expr RPAREN Stmt ELSE Stmt");
        RESULT = new IfStatement(condition, trueStatement, falseStatement);
    :}
    | While LeftParenthesis Expr:condition RightParenthesis Stmt:statement
    {:
        output.add("Stmt ::= WHILE LPAREN Expr RPAREN Stmt");
        RESULT = new WhileStatement(condition, statement);
    :}
    | SystemOutPrintln LeftParenthesis Expr:expression RightParenthesis Semicolon
    {:
        output.add("Stmt ::= SYSTEMOUTPRINTLN LPAREN Expr RPAREN SEMI");
        RESULT = new PrintlnStatement(expression);
    :}
    | ID:id Assignment Expr:expression Semicolon
    {:
        output.add("Stmt ::= ID GETS Expr SEMI");
        RESULT = new AssignmentStatement(id.value, expression);
    :}
    | CallExpr:ce Dot ID:methodName LeftParenthesis OptExprList:el RightParenthesis Semicolon
    {:
        output.add("Stmt ::= CallExpr DOT ID LPAREN OptExprList RPAREN");
        RESULT = new MethodInvocation(ce, methodName.value, el);
    :}
    | error Semicolon
    ;
Expr ::= Expr:e1 Plus Expr:e2
    {:
        output.add("Expr ::= Expr PLUS Expr");
        RESULT = new BinaryOperation(BinaryOperator.PLUS, e1, e2);
    :}
    | Expr:e1 Minus Expr:e2
    {:
        output.add("Expr ::= Expr MINUS Expr");
        RESULT = new BinaryOperation(BinaryOperator.MINUS, e1, e2);
    :}
    | Expr:e1 Multiply Expr:e2
    {:
        output.add("Expr ::= Expr TIMES Expr");
        RESULT = new BinaryOperation(BinaryOperator.MULTIPLY, e1, e2);
    :}
    | Expr:e1 Divide Expr:e2
    {:
        output.add("Expr ::= Expr DIVIDE Expr");
        RESULT = new BinaryOperation(BinaryOperator.DIVIDE, e1, e2);
    :}
    | Expr:e1 LessThan Expr:e2
    {:
        output.add("Expr ::= Expr LT Expr");
        RESULT = new BinaryOperation(BinaryOperator.LT, e1, e2);
    :}
    | Expr:e1 LessThanOrEqual Expr:e2
    {:
        output.add("Expr ::= Expr LTE Expr");
        RESULT = new BinaryOperation(BinaryOperator.LTE, e1, e2);
    :}
    | Expr:e1 GreaterThanOrEqual Expr:e2
    {:
        output.add("Expr ::= Expr GTE Expr");
        RESULT = new BinaryOperation(BinaryOperator.GTE, e1, e2);
    :}
    | Expr:e1 GreaterThan Expr:e2
    {:
        output.add("Expr ::= Expr GT Expr");
        RESULT = new BinaryOperation(BinaryOperator.GT, e1, e2);
    :}
    | Expr:e1 Equals Expr:e2
    {:
        output.add("Expr ::= Expr EQ Expr");
        RESULT = new BinaryOperation(BinaryOperator.EQ, e1, e2);
    :}
    | Expr:e1 NotEquals Expr:e2
    {:
        output.add("Expr ::= Expr NE Expr");
        RESULT = new BinaryOperation(BinaryOperator.NEQ, e1, e2);
    :}
    | Expr:e1 And Expr:e2
    {:
        output.add("Expr ::= Expr AND Expr");
        RESULT = new BinaryOperation(BinaryOperator.AND, e1, e2);
    :}
    | Expr:e1 Or Expr:e2
    {:
        output.add("Expr ::= Expr OR Expr");
        RESULT = new BinaryOperation(BinaryOperator.OR, e1, e2);
    :}
    | UnaryExpr:ue
    {:
        output.add("Expr ::= UnaryExpr");
        RESULT = ue;
    :}
    ;
OptExprList ::= ExprList:el
    {:
        output.add("OptExprList ::= ExprList");
        RESULT = el;
    :}
    |
    {:
        output.add("OptExprList ::=");
        RESULT = new LinkedList<>();
    :}
    ;
ExprList ::= ExprList:el Comma Expr:e
    {:
        output.add("ExprList ::= ExprList COMMA Expr");
        el.add(e);
        RESULT = el;
    :}
    | Expr:e
    {:
        output.add("ExprList ::= Expr");
        List<Expression> el = new LinkedList<>();
        el.add(e);
        RESULT = el;
    :}
    ;
LiteralExpr ::= ID:variableName
    {:
        output.add("LiteralExpr ::= ID");
        RESULT = new VariableInvocation(variableName.value);
    :}
    | Integer:i
    {:
        output.add("LiteralExpr ::= INTEGER");
        RESULT = new LiteralValue("int", i.value);
    :}
    | True
    {:
        output.add("LiteralExpr ::= TRUE");
        RESULT = new LiteralValue("boolean", true);
    :}
    | ParenExpr:pe
    {:
        output.add("LiteralExpr ::= ParenExpr");
        RESULT = pe;
    :}
    | False
    {:
        output.add("LiteralExpr ::= FALSE");
        RESULT = new LiteralValue("boolean", false);
    :}
    | This
    {:
        output.add("LiteralExpr ::= THIS");
        RESULT = LiteralKeyword.THIS;
    :}
    | Null
    {:
        output.add("LiteralExpr ::= NULL");
        RESULT = LiteralKeyword.NULL;
    :}
    ;
ParenExpr ::= LeftParenthesis Expr:expression RightParenthesis
    {:
        output.add("ParenExpr ::= LPAREN Expr RPAREN");
        RESULT = new ParenthesisExpression(expression);
    :}
    ;
UnaryExpr ::= CallExpr:ce
    {:
        output.add("UnaryExpr ::= CallExpr");
        RESULT = new UnaryOperation(new LinkedList<>(), ce);
    :}
    | Minus UnaryExpr:ue
    {:
        output.add("UnaryExpr ::= MINUS UnaryExpr");
        ue.operators.add(UnaryOperator.MINUS);
        RESULT = ue;
    :}
    | Not UnaryExpr:ue
    {:
        output.add("UnaryExpr ::= NOT UnaryExpr");
        ue.operators.add(UnaryOperator.NOT);
        RESULT = ue;
    :}
    ;
CallExpr ::= LiteralExpr:le
    {:
        output.add("CallExpr ::= LiteralExpr");
        RESULT = le;
    :}
    | New ID:className LeftParenthesis RightParenthesis
    {:
        output.add("CallExpr ::= NEW ID LPAREN RPAREN");
        RESULT = new ConstructorInvocation(className.value);
    :}
    | CallExpr:ce Dot ID:methodName LeftParenthesis OptExprList:el RightParenthesis
    {:
        output.add("CallExpr ::= CallExpr DOT ID LPAREN OptExprList RPAREN");
        RESULT = new MethodInvocation(ce, methodName.value, el);
    :}
    ;
